/*
  Code modified from:
  http://www.lostdecadegames.com/how-to-make-a-simple-html5-canvas-game/
  using graphics purchased from vectorstock.com
*/

/* Initialization.
Here, we create and add our "canvas" to the page.
We also load all of our images. 
*/


let canvas;
let ctx;

canvas = document.createElement("canvas");
ctx = canvas.getContext("2d");
canvas.width = 1000;
canvas.height = 500;
document.body.appendChild(canvas);

let bgReady, heroReady, foodReady, dragonReady;
let bgImage, heroImage, foodImage, dragonImage;
let bg2Image, bg3Image, bg4Image, bg5Image, bg6Image, bg7Image, bg3Ready, bg4Ready, bg5Ready, bg6Ready, bg7Ready;

let startTime = Date.now();
const SECONDS_PER_ROUND = 30;
let elapsedTime = 0;

let names = ["hero_down_0","hero_down_1","hero_down_2","hero_up_0", "hero_up_1", "hero_up_2", "hero_right_0","hero_right_1", "hero_right_2", "hero_left_0", "hero_left_1", "hero_left_2"];

function loadImages() {
  let n,name,
      result = {},
      count  = names.length,
      
      onload = function() {
        if (--count == 0) heroReady = true;
      };
  for(n = 0 ; n < names.length ; n++) {
    name = names[n];
    result[name] = document.createElement('img');
    result[name].addEventListener('load', onload);
    result[name].src = "images/" + name + ".png";
  }
  bgImage = new Image();
  bgImage.onload = function () {
    // show the background image
    bgReady = true;
  };
  bgImage.src = "images/layer-1.png";
  heroImage = new Image();
  heroImage.onload = function () {
    // show the hero image
    heroReady = true;
  };
  heroImage.src = "images/hero_down_0.png";
  foodImage = new Image();
  foodImage.onload = function () {
    // show the food image
    foodReady = true;
  };
  foodImage.src = "images/food.png";

  
  dragonImage = new Image();
  dragonImage.onload = function () {
    // show the dragon image
    dragonReady = true;
  };
  dragonImage.src ="images/dragon.gif";

  bg7Image = new Image();
  bg7Image.onload = function () {
    // show the bg7 image
    bg7Ready = true;
  };
  bg7Image.src ="images/layer-7.png";

  bg6Image = new Image();
  bg6Image.onload = function () {
    // show the bg6 image
    bg6Ready = true;
  };
  bg6Image.src ="images/layer-6.png";
  bg5Image = new Image();
  bg5Image.onload = function () {
    // show the bg5 image
    bg5Ready = true;
  };
  bg5Image.src ="images/layer-5.png";
  bg4Image = new Image();
  bg4Image.onload = function () {
    // show the bg4 image
    bg4Ready = true;
  };
  bg4Image.src ="images/layer-4.png";
  bg3Image = new Image();
  bg3Image.onload = function () {
    // show the bg3 image
    bg3Ready = true;
  };
  bg3Image.src ="images/layer-3.png";
}

let state = 0;
let userTyped = "false";
function displayHeroDirection(direction) {
  let heroDirectionLink = "";
  if (userTyped == true){state +=1;}
  if (state <10) {stateurl = 0;}
  else if (state <20) {stateurl = 1;}
  else if (state <30) {stateurl = 2;}
  else if (state <40) {stateurl = 1;}
  else if (state <50) {stateurl = 0;}
  if (direction == "left"){
    heroDirectionLink = `images/hero_left_${stateurl}.png`
  }
  if (direction == "right"){
    heroDirectionLink = `images/hero_right_${stateurl}.png`
  }
  if (direction == "up"){
    heroDirectionLink = `images/hero_up_${stateurl}.png`
  }
  if (direction == "down"){
    heroDirectionLink = `images/hero_down_${stateurl}.png`
  }
  if (state == 50 && userTyped == true){
    state = 0;
  }
  userTyped = false;
  return heroDirectionLink;
}


// * Setting stages
let stage = 0; // 0 = beginning, 1 = after transformation, 2 = boss

// function displayHeroDirection(direction) {
//   let heroDirectionLink = "";
//   if (userTyped == true){state +=1;}
//   if (state >=25) {stateurl = 0;}
//   if (state <25) {stateurl = 1;}
//   if (direction == "left"){
//     heroDirectionLink = `images/pikachu_left_${stateurl}.png`
//   }
//   if (direction == "right"){
//     heroDirectionLink = `images/pikachu_right_${stateurl}.png`
//   }
//   if (direction == "up"){
//     heroDirectionLink = `images/pikachu_up_${stateurl}.png`
//   }
//   if (direction == "down"){
//     heroDirectionLink = `images/pikachu_down_${stateurl}.png`
//   }
//   if (state == 50 && userTyped == true){
//     state = 0;
//   }
//   userTyped = false;
//   return heroDirectionLink;
// }



/** 
 * Setting up our characters.
 * 
 * Note that heroX represents the X position of our hero.
 * heroY represents the Y position.
 * We'll need these values to know where to "draw" the hero.
 * 
 * The same applies to the food.
 */

let heroEvolved = 0;
let heroDirection = "down";

let heroX = canvas.width / 2;
let heroY = canvas.height / 2;

let foodX = Math.round(Math.random()*(canvas.width - 32));
let foodY = Math.round(Math.random()*(canvas.height -32));

let dragonX = Math.round(Math.random()*(canvas.width - 120)); // fix later
let dragonY = Math.round(Math.random()*(canvas.height - 120)); // fix later

/** 
 * Keyboard Listeners
 * You can safely ignore this part, for now. 
 * 
 * This is just to let JavaScript know when the user has pressed a key.
*/
let keysDown = {};
function setupKeyboardListeners() {
  // Check for keys pressed where key represents the keycode captured
  // For now, do not worry too much about what's happening here. 
  addEventListener("keydown", function (key) {
    keysDown[key.keyCode] = true;
  }, false);

  addEventListener("keyup", function (key) {
    delete keysDown[key.keyCode];
  }, false);
}


/**
 *  Update game objects - change player position based on key pressed
 *  and check to see if the food has been caught!
 *  
 *  If you change the value of 5, the player will move at a different rate.
 */
let bg7X = 0;
let bg6X = 0;
let bg5X = 0;
let bg4X = 0;
let bg3X = 0;
let update = function () {
  // Update the time.
  elapsedTime = Math.floor((Date.now() - startTime) / 1000);
  if (38 in keysDown) { // Player is holding up key
    userTyped = true;
    heroDirection = "up";
    heroY -= 7;
    if (heroY <= 0 - 48){
      heroY = canvas.height;
    }
  }
  if (40 in keysDown) { // Player is holding down key
    userTyped = true;
    heroDirection = "down";
    heroY += 7;
    if (heroY >= canvas.height){
      heroY = 0;
    }
  }
  if (37 in keysDown) { // Player is holding left key
    userTyped = true;
    heroDirection = "left";
    heroX -= 7;
    if (heroX <= 0 - 48){
      heroX = canvas.width;
    }
  }
  if (39 in keysDown) { // Player is holding right key
    userTyped = true;
    heroDirection = "right";
    heroX += 7;
    if (heroX >= canvas.width){
      heroX = 0;
    }
  }

  // Check if player and food collided. Our images
  // are about 32 pixels big.

  if (stage == 0) {
    if (
      heroX <= (foodX + 48)
      && foodX <= (heroX + 48)
      && heroY <= (foodY + 48)
      && foodY <= (heroY + 48)
    ) {
      // Pick a new location for the food.
      // Note: Change this to place the food at a new, random location.
      foodX = Math.round(Math.random()*(canvas.width - 32));
      foodY = Math.round(Math.random()*(canvas.height - 32));
    }
}
  if (stage == 0) {
    if (
      heroX <= (dragonX + 120)
      && dragonX <= (heroX + 48)
      && heroY <= (dragonY + 120)
      && dragonY <= (heroY + 48)
    ) {
      // Pick a new location for the food.
      // Note: Change this to place the food at a new, random location.

      
      dragonX = Math.round(Math.random()*(canvas.width - 120));
      dragonY = Math.round(Math.random()*(canvas.height - 120));
    }
  };

  //Parallax Background
  bg7X -= 5;
  if (bg7X <= -1000) {bg7X=0}
  bg6X -= 5;
  if (bg6X <= -1000) {bg6X=0}
  bg5X -= 1;
  if (bg5X <= -1000) {bg5X=0}
  bg4X -= 1;
  if (bg4X <= -1000) {bg4X=0}
  bg3X -= 1;
  if (bg3X <= -1000) {bg3X=0}

  // food movement
  foodX -= 5;
  if (foodX <= 0) {foodX=1000}


  // // random dragon move + out of bound
  // if (dragonY > heroY) {dragonY -= 3;}
  // else if (dragonY < heroY){dragonY += 3};
  // if (dragonX > heroX) {dragonX -= 3;}
  // else if (dragonX < heroX) {dragonX += 3};

  // dragonX += Math.round((Math.random() + 0.5)*10);
}
  

/**
 * This function, render, runs as often as possible.
 */
var render = function () {

  if (bgReady) {
    ctx.drawImage(bgImage, 0, 0);
  }
  if (bg3Ready) {
    ctx.drawImage(bg3Image, bg3X, 0);
    ctx.drawImage(bg3Image, bg3X+1000, 0);
  }
  if (bg4Ready) {
    ctx.drawImage(bg4Image, bg4X-50, 0);
    ctx.drawImage(bg4Image, bg4X+950,0);
  }
  if (bg5Ready) {
    ctx.drawImage(bg5Image, bg5X, 0);
    ctx.drawImage(bg5Image, bg5X+1000, 0);
  }

  if (bg7Ready) {
    ctx.drawImage(bg7Image, bg7X, 0);
    ctx.drawImage(bg7Image, bg7X+1000, 0);
  }

  if (bg6Ready) {
    ctx.drawImage(bg6Image, bg6X, 0);
    ctx.drawImage(bg6Image, bg6X+1000, 0);
  }

  
  heroImage.src = displayHeroDirection(heroDirection);
 
  if (heroReady) {
    ctx.drawImage(heroImage, heroX, heroY);
  }
  if (foodReady) {
    ctx.drawImage(foodImage, foodX, foodY);
  }
  if (dragonReady) {
    ctx.drawImage(dragonImage, dragonX, dragonY);
  }
 
  ctx.fillText(`Seconds Remaining: ${SECONDS_PER_ROUND - elapsedTime}`, 20, 100);
};

/**
 * The main game loop. Most every game will have two distinct parts:
 * update (updates the state of the game, in this case our hero and food)
 * render (based on the state of our game, draw the right things)
 */
var main = function () {
  update(); 
  render();
  // Request to do this again ASAP. This is a special method
  // for web browsers. 
  requestAnimationFrame(main);
};

// Cross-browser support for requestAnimationFrame.
// Safely ignore this line. It's mostly here for people with old web browsers.
var w = window;
requestAnimationFrame = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.msRequestAnimationFrame || w.mozRequestAnimationFrame;

// Let's play this game!
loadImages();
setupKeyboardListeners();
main();